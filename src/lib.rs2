use ext_php_rs::{info_table_end, info_table_row, info_table_start, prelude::*};
use ext_php_rs::{exception::PhpResult, types::Zval, zend::ce};
use roaring::RoaringBitmap;
use ext_php_rs::zend::ModuleEntry;

#[php_class(name = "RoaringBitmap")]
#[implements(ce::serializable())]
#[implements(ce::countable())]
#[derive(Default)]
pub struct RoaringBitmapWrapper {
    bitmap: RoaringBitmap,
}

#[php_impl]
impl RoaringBitmapWrapper {
    #[constructor]
    pub fn __construct() -> Self {
        RoaringBitmapWrapper {
            bitmap: RoaringBitmap::new(),
        }
    }

    // 插入值
    pub fn insert(&mut self, value: u32) {
        self.bitmap.insert(value);
    }

    // 检查是否包含某个值
    pub fn contains(&self, value: u32) -> bool {
        self.bitmap.contains(value)
    }

    // 删除值
    pub fn remove(&mut self, value: u32) {
        self.bitmap.remove(value);
    }

    // pub fn __toString(&self) -> String {
    //     format!("RoaringBitmap with {} elements", self.bitmap.len())
    // }
    // pub fn __to_string(&self) -> Vec<u8> {
    //     vec![1u8]
    //     // format!("RoaringBitmap with {} elements", self.bitmap.len())
    // }

    pub fn __serialize(&self) -> PhpResult<Vec<u8>> {
        Ok(vec![1u8])
        // Some("fdaf".to_string())
    }

    pub fn __unserialize(&self, s: Vec<u8>) -> PhpResult<()>  {
        Ok(())
    }

    // pub fn __tostring(&self) -> String {
    //     format!("RoaringBitmap with {} elements", self.bitmap.len())
    // }

    pub fn count(&self) -> i32 {
        self.bitmap.len() as i32
    }
}

/// Used by the `phpinfo()` function and when you run `php -i`.
pub extern "C" fn php_module_info(_module: *mut ModuleEntry) {
    info_table_start!();
    info_table_row!("RoaringBitmap", "enabled");
    info_table_end!();
}

#[php_module]
pub fn module(module: ModuleBuilder) -> ModuleBuilder {
    module
}
